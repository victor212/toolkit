#!/bin/bash
################################################################################
# Common setting area
################################################################################
if [ "$TERM" == "xterm" ]; then
        export TERM=xterm-256color
fi

if [ "$TERM" == "screen" ]; then
        export TERM=screen-256color
fi

# Add ~/bin to PATH

export PATH=~/bin2:$PATH

################################################################################
# My command area
################################################################################

function ___help()
{
	echo "sos: options"
	echo " 	-h : get help"
	echo " 	tips : get common tips"
	echo " 	mac : get mac tips"
	echo "Supported seft-defined commands:"
	echo " 	markcs"
	echo " 	clearcs"
	echo " 	mktags"
	echo " 	mindexer"
	echo " 	mcsignore"

}

function ___common_tips()
{
	echo "This is my common tips"
	echo "ctags -R"
	echo "  :set tags=xxx"
	echo "cscope -Rbkq"
	echo "  :cs add cscope.out"

}

function ___mac_tips()
{
	echo "MAC serial tool"
	echo " 	screen /dev/tty.usbserial-xxxxx  115200"
}

function sos()
{
	# Need to clear builtin variables first
	OPTERR=""
	OPTIND=0
	OPTARG=""
	while getopts :h OPTION; do
		case $OPTION in
		h) 	#echo "optarg = " $OPTARG
			#echo "optind = " $OPTIND
			___help
			return;;
		?) 	echo "Invalid parameters"
			___help
		   	return;;
		esac
	done
# 	echo "optind = "$OPTIND

	# Keep rest parameters only 
	shift $(($OPTIND - 1))

	# No leading opt parameters
	#echo $1
	if [ "$1"x = ""x ]; then
		echo "No parameters, please get help: sos -h"
		return
	fi

	case $1 in
	tips) 	___common_tips
		;;
	mac) 	___mac_tips
		;;
	esac
}

# do ". acd_func.sh"
# acd_func 1.0.5, 10-nov-2004
# petar marinov, http:/geocities.com/h2428, this is public domain

cd_func ()
{
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi

  the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi

  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  #
  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  #
  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null

  #
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}

alias cd=cd_func


__my_fzf_select__() {
  local cmd="${FZF_CTRL_T_COMMAND:-"command find -L ${R} -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type f -print \
    -o -type d -print \
    -o -type l -print 2> /dev/null"}"
  eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS $FZF_CTRL_T_OPTS" fzf -m "$@" | while read -r item; do
    printf '%q' "$item"
  done
  echo
}

__my_fzf_use_tmux__() {
  [ -n "$TMUX_PANE" ] && [ "${FZF_TMUX:-0}" != 0 ] && [ ${LINES:-40} -gt 15 ]
}

__my_fzfcmd() {
  __my_fzf_use_tmux__ &&
    echo "fzf-tmux -d${FZF_TMUX_HEIGHT:-40%}" || echo "fzf"
}

__my_fzf_cd__() {
  local cmd dir
  cmd="${FZF_ALT_C_COMMAND:-"command find -L ${R} -mindepth 1 \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
    -o -type d -print 2> /dev/null"}"
  dir=$(eval "$cmd" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS $FZF_ALT_C_OPTS" $(__my_fzfcmd) +m) && cd "$dir"
}

vf() {
	vim $(__my_fzf_select__)
}

#alias gd=__my_fzf_cd__

# go to module
alias md=cdc
# go to sdk top
alias cdt=croot
alias lf=__my_fzf_select__

export CS_SOURCE_FILE_DIR+=

function markcs()
{
	CS_SOURCE_FILE_DIR+=$(pwd)";"
	ALL_SRCS=${CS_SOURCE_FILE_DIR//;/ }
	for onepath in ${ALL_SRCS}
	do
		echo ${onepath}
	done
}

function clearcs()
{
	CS_SOURCE_FILE_DIR=""
}

function ___mkcscopefiles()
{
	ALL_SRCS=${CS_SOURCE_FILE_DIR//;/ }
	rm -rf cscope.files

	for onepath in ${ALL_SRCS}
	do
		echo ${onepath}
		find ${onepath} -name "*.[ch]" -o -name "*.cpp" >> cscope.files
	done

}

function mktags()
{
	rm -rf tags
	ALL_SRCS=${CS_SOURCE_FILE_DIR//;/ }
	for onepath in ${ALL_SRCS}
	do
		ctags -a -R ${onepath}
	done

	___mkcscopefiles
	rm -rf cscope.in.out cscope.out cscope.po.out
	cscope -Rbqk -i cscope.files
}

function cdc()
{
	dest=""
	if [ x"$R" = x"" ]; then
		return 0
	fi

	local param="$*"

	find $R/* -type d|grep components |grep "source$" >~/.cd

	if [ x"$1" = x"" ]; then
		local count=0
	else
		local count=$(cat ~/.cd | grep $1 | wc -l)
	fi
	if [ $count -gt 1 ] ; then
		dest=$(cat ~/.cd | fzf -e --query=$param)
		if [ x"$dest" != x"" ]; then
			cd $dest
		fi
		return 0
	elif [ $count -eq 1 ] ; then
		cd $(cat ~/.cd | grep $1)
		return 0
	else
		dest=$(cat ~/.cd | fzf -e)
		if [ x"$dest" != x"" ]; then
			cd $dest
		fi
		return 0
	fi
}

function cdd()
{
	dest=""
	local param="$*"

	find * -type d >~/.cd

	if [ x"$1" = x"" ]; then
		local count=0
	else
		local count=$(cat ~/.cd | grep $1 | wc -l)
	fi
	if [ $count -gt 1 ] ; then
		dest=$(cat ~/.cd | fzf -e --query=$param)
		if [ x"$dest" != x"" ]; then
			cd $dest
		fi
		return 0
	elif [ $count -eq 1 ] ; then
		cd $(cat ~/.cd | grep $1)
		return 0
	else
		dest=$(cat ~/.cd | fzf -e)
		if [ x"$dest" != x"" ]; then
			cd $dest
		fi
		return 0
	fi
}

function mroot()
{
	export R=${PWD}
}

function croot()
{
	if [ x"$R" = x"" ]; then
		return 0
	fi
	cd $R
}

function mindexer()
{
	mkdir -p ${PWD}/.cscope/
	DB_CS=${PWD}/.cscope/cscope.out
	DB_TAG=${PWD}/tags
	FLIST=${PWD}/.cscope/cscope.files

        if [ x"$1" = x"list" ]; then
                cscope-indexer -v -r -l -i ${FLIST}
        else
                cscope-indexer -v -r -f ${DB_CS} -i ${FLIST}
        fi

	if [ x"$1" = x"all" ]; then
		echo "Creating ctags ..."
		ctags -f ${DB_TAG} -L ${FLIST}
		echo "Creating ctags files done "
	fi
}

function mcsignore()
{
	touch .cscopeignore
}

alias lg='git log --graph --decorate=full  -10'
alias st='git status'
alias gb='git branch'
alias br='git branch'
alias gc='git commit'
alias gitss='git stash'

